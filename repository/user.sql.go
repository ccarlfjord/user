// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package repository

import (
	"context"

	"github.com/google/uuid"
)

const activateUser = `-- name: ActivateUser :exec
UPDATE users SET active = TRUE WHERE id = $1
`

func (q *Queries) ActivateUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, activateUser, id)
	return err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users(id, username, email, hashed_password, salt, active, admin) VALUES( $1, $2, $3, $4, $5, $6, $7)
RETURNING id, email, username, hashed_password, salt, active, admin
`

type CreateUserParams struct {
	ID             uuid.UUID `json:"id"`
	Username       string    `json:"username"`
	Email          string    `json:"email"`
	HashedPassword []byte    `json:"hashed_password"`
	Salt           []byte    `json:"salt"`
	Active         bool      `json:"active"`
	Admin          bool      `json:"admin"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.ID,
		arg.Username,
		arg.Email,
		arg.HashedPassword,
		arg.Salt,
		arg.Active,
		arg.Admin,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.HashedPassword,
		&i.Salt,
		&i.Active,
		&i.Admin,
	)
	return i, err
}

const deactivateUser = `-- name: DeactivateUser :exec
UPDATE users SET active = FALSE WHERE id = $1
`

func (q *Queries) DeactivateUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deactivateUser, id)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const disableAdmin = `-- name: DisableAdmin :exec
UPDATE users SET admin = FALSE WHERE id = $1
`

func (q *Queries) DisableAdmin(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, disableAdmin, id)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, username, hashed_password, salt, active, admin FROM users WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.HashedPassword,
		&i.Salt,
		&i.Active,
		&i.Admin,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, email, username, hashed_password, salt, active, admin FROM users WHERE id = $1
`

func (q *Queries) GetUserById(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.HashedPassword,
		&i.Salt,
		&i.Active,
		&i.Admin,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT id, email, username, hashed_password, salt, active, admin FROM users
`

func (q *Queries) GetUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Username,
			&i.HashedPassword,
			&i.Salt,
			&i.Active,
			&i.Admin,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setAdmin = `-- name: SetAdmin :exec
UPDATE users SET admin = TRUE WHERE id = $1
`

func (q *Queries) SetAdmin(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, setAdmin, id)
	return err
}

const storeUser = `-- name: StoreUser :exec
UPDATE users SET email = $2, hashed_password = $3, salt = $4 WHERE id = $1
`

type StoreUserParams struct {
	ID             uuid.UUID `json:"id"`
	Email          string    `json:"email"`
	HashedPassword []byte    `json:"hashed_password"`
	Salt           []byte    `json:"salt"`
}

func (q *Queries) StoreUser(ctx context.Context, arg StoreUserParams) error {
	_, err := q.db.Exec(ctx, storeUser,
		arg.ID,
		arg.Email,
		arg.HashedPassword,
		arg.Salt,
	)
	return err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users SET email = $2, hashed_password = $3, salt = $4, active = $5, admin = $6 WHERE id = $1
RETURNING id, email, username, hashed_password, salt, active, admin
`

type UpdateUserParams struct {
	ID             uuid.UUID `json:"id"`
	Email          string    `json:"email"`
	HashedPassword []byte    `json:"hashed_password"`
	Salt           []byte    `json:"salt"`
	Active         bool      `json:"active"`
	Admin          bool      `json:"admin"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.ID,
		arg.Email,
		arg.HashedPassword,
		arg.Salt,
		arg.Active,
		arg.Admin,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.HashedPassword,
		&i.Salt,
		&i.Active,
		&i.Admin,
	)
	return i, err
}
